<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dylan Servilla - ScummVM Blog</title>
    <link>https://djsrv.github.io/scummvm/</link>
    <description>Recent content in ScummVM Blog on Dylan Servilla</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dservilla@gmail.com (Dylan Servilla)</managingEditor>
    <webMaster>dservilla@gmail.com (Dylan Servilla)</webMaster>
    <lastBuildDate>Tue, 12 May 2020 01:04:56 -0400</lastBuildDate>
    
	<atom:link href="https://djsrv.github.io/scummvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning the Lingo</title>
      <link>https://djsrv.github.io/scummvm/learning-the-lingo/</link>
      <pubDate>Mon, 20 Jul 2020 23:34:57 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/learning-the-lingo/</guid>
      <description>&lt;p&gt;This week I worked out some longstanding Lingo issues!&lt;/p&gt;
&lt;h2 id=&#34;duplicate-scripts&#34;&gt;Duplicate Scripts&lt;/h2&gt;
&lt;p&gt;The first issue was duplicate scripts in Director 4 movies. Each cast member should have at most one Lingo script associated with it, but we were running into movies in which a cast member seemingly had several scripts. There was no obvious way to deal with this - redefining the script usually led to incorrect behavior, and so did keeping the original definition.&lt;/p&gt;
&lt;p&gt;These duplicate scripts were rare in most movies, so the problem went ignored for a while, but in our recently added target &lt;em&gt;Majestic Part 1: Alien Encounter&lt;/em&gt;, there were several hundred scripts, and almost every one conflicted with another.&lt;/p&gt;
&lt;p&gt;Initially, I thought that there must be something that indicated certain scripts, or at least certain handlers within these scripts, were unused. The first place I investigated was the script&amp;rsquo;s &amp;ldquo;handler vectors.&amp;rdquo; These differed between some of the duplicate scripts, and I thought they might hold the key to how the script conflicts should be handled.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Handler vectors&amp;rdquo; were identified as an array of 16-bit integers in &lt;a href=&#34;https://docs.google.com/document/d/1jDBXE4Wv1AEga-o1Wi8xtlNZY4K2fHxW2Xs8RgARrqk/edit&#34;&gt;Anthony Kleine&amp;rsquo;s Director documentation&lt;/a&gt;, but there was no explanation of their purpose. I got in touch with Anthony, but he couldn&amp;rsquo;t remember what they were for, and they remained a mystery to me for weeks. Once I began deeper investigation, it quickly became apparent that the &amp;ldquo;handler vectors&amp;rdquo; are just used to map event IDs to handler IDs. Totally unrelated.&lt;/p&gt;
&lt;p&gt;The next suspect was the Lingo context, a container which maps script IDs to script data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Section LctX {
	Struct header {
		...
		Uint16 [big] freePtr
	}
	...
	Array scripts(count) {
		Struct scriptLink {
			Uint32 unknown
			Uint32 [big] ID // use MMAP!
			Uint16 [big] used // 0 : unused , 4: used
			Uint12 [big] link // For unused entries: link to next unused, or -1.
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Earthquake-Project/Format-Documentation/blob/master/structure/scripting/FormatNotes_Scripts.txt&#34;&gt;(Source: Brian151)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The two areas of interest are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The script entry&amp;rsquo;s &lt;code&gt;used&lt;/code&gt; field&lt;/li&gt;
&lt;li&gt;A linked list of unused scripts, which begins at the script entry at index &lt;code&gt;freePtr&lt;/code&gt;. The entry&amp;rsquo;s &lt;code&gt;link&lt;/code&gt; field gives the index of the next unused script, or -1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, after much investigation, it seems that there is actually no difference in how a script with &lt;code&gt;used = 0&lt;/code&gt; and a script with &lt;code&gt;used = 4&lt;/code&gt; should be handled. The linked list does indeed indicate unused scripts, but all of the entries in the list seem to have an &lt;code&gt;ID&lt;/code&gt; of -1. Thus, these unused scripts have no script data associated with them, and they were never being loaded in the first place. There was no way they could be causing conflicts, since they didn&amp;rsquo;t really exist.&lt;/p&gt;
&lt;p&gt;To finally solve the mystery, I had to throw out what I thought I knew about how Lingo scripts are linked to cast members. For years, the Director reverse engineering community understood that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The scripts are not owned by their individual Cast Members in the Key Table [which links cast members to most of their assets] as you may expect. Instead, each Lingo Script has the number of its corresponding Cast Member &lt;a href=&#34;https://docs.google.com/document/d/1jDBXE4Wv1AEga-o1Wi8xtlNZY4K2fHxW2Xs8RgARrqk/edit&#34;&gt;(Source: Anthony Kleine)&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After a few days of testing, I noticed that the cast member ID stored within Lingo scripts was sometimes incorrect. Or, as in &lt;em&gt;Majestic&lt;/em&gt;, almost always incorrect. There had to be some other way by which cast members were linked to their scripts.&lt;/p&gt;
&lt;p&gt;The obvious place to look was in the cast member data, which is split into two parts - data specific to the cast member type, followed by largely standard cast member info. We had previously identified a &lt;code&gt;scriptId&lt;/code&gt; field in the data specific to script cast members, and these IDs always seemed to be correct. However, other types of cast members could have scripts as well, and since they wouldn&amp;rsquo;t have this field, this solution wouldn&amp;rsquo;t work for them. Or so it seemed.&lt;/p&gt;
&lt;p&gt;Long story short, we were treating too many bytes as type-specific data, and the &lt;code&gt;scriptId&lt;/code&gt; was actually in the standard cast member info. Once that was fixed, every cast member had a single, correct &lt;code&gt;scriptId&lt;/code&gt; associated with it. Use that to link cast members to the scripts, and no more duplicate scripts!&lt;/p&gt;
&lt;h2 id=&#34;grammar&#34;&gt;Grammar&lt;/h2&gt;
&lt;p&gt;Next was improvements to the Lingo grammar.&lt;/p&gt;
&lt;p&gt;First, I needed to differentiate between statements and expressions. An expression by itself, like &lt;code&gt;2 + 2&lt;/code&gt;, isn&amp;rsquo;t a valid Lingo script - it needs to be an argument to a statement, like &lt;code&gt;put 2 + 2&lt;/code&gt;. However, we were treating expressions and statements exactly the same, which allowed incorrect scripts and significantly complicated the grammar. Once this was fixed, half of the grammar&amp;rsquo;s 441 conflicts were gone.&lt;/p&gt;
&lt;p&gt;Next, I needed to get rid of the differentiation between Lingo&amp;rsquo;s subroutine types. Confusingly, Lingo has (at least) 3 different types, with overlapping purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commands - These are built-in, and invoked by a call statement, like &lt;code&gt;foo()&lt;/code&gt; or &lt;code&gt;foo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Functions - These are also built-in, and invoked by a call expression, like &lt;code&gt;put foo()&lt;/code&gt;. Very rarely, you can also invoke them as statements.&lt;/li&gt;
&lt;li&gt;Handlers - These are user-defined, and can be invoked by either call statements or call expressions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, these are separate things, but they should only be treated separately during execution. Previously we were differentiating them in the grammar, which again complicated things.&lt;/p&gt;
&lt;p&gt;With that done, I began general cleanup. Reorganizing things where conflicts could be eliminated, reducing the use of right recursion, and adding support for fun statements like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;put cast cast
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What should this do? Why, of course, it prints the cast member whose ID is equal to the variable &lt;code&gt;cast&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set cast = 1
put cast cast
-- (cast 1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All in all, the grammar is now truer to the original, and we&amp;rsquo;re down to 6 conflicts from 441!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIAWs</title>
      <link>https://djsrv.github.io/scummvm/miaws/</link>
      <pubDate>Mon, 13 Jul 2020 15:26:00 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/miaws/</guid>
      <description>&lt;p&gt;This last week I finished up my refactoring spree, adding an object interface which allows any type to be treated as a Lingo object. With this done, it allowed for our Stage to be turned into a Lingo object, enabling&amp;hellip;&lt;/p&gt;
&lt;p&gt;Movies In A Window!&lt;/p&gt;

&lt;iframe src=&#34;https://www.youtube.com/embed/h8eKy7ymFOU&#34; style=&#34;width: 560px; height: 315px; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Now new windows can be created/destroyed and hidden/shown with &lt;code&gt;open window &amp;quot;ball&amp;quot;&lt;/code&gt;, &lt;code&gt;close window &amp;quot;ball&amp;quot;&lt;/code&gt;, &lt;code&gt;forget window &amp;quot;ball&amp;quot;&lt;/code&gt;, etc. There&amp;rsquo;s still a good number of Lingo methods and properties to implement, and rendering issues which need to be sorted out, but for now I&amp;rsquo;m focusing on fixing the large number of Buildbot errors which have recently piled up.&lt;/p&gt;
&lt;p&gt;In particular, I&amp;rsquo;ve been trying to figure out how to handle duplicate script definitions in Majestic and other games, which has felt like a bit of a wild goose chase. After spending the weekend searching, I&amp;rsquo;ve identified how to handle 6 of roughly 180 duplicate scripts, so I&amp;rsquo;ll have to resume this hunt later.&lt;/p&gt;
&lt;p&gt;For now, I&amp;rsquo;m fixing up issues in the Lingo grammar, which is going much more smoothly. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Refactoring</title>
      <link>https://djsrv.github.io/scummvm/refactoring/</link>
      <pubDate>Mon, 06 Jul 2020 20:50:26 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/refactoring/</guid>
      <description>&lt;p&gt;This last week I got some boring but important work done. After completing some odd jobs like implementing event delegation for Director 2-3 and TrueType font loading, I began refactoring the Director engine to make it flexible enough to handle Movies In A Window (MIAWs), or multiple movies running in parallel.&lt;/p&gt;
&lt;p&gt;For those not familiar, Director uses a movie metaphor for development. A movie&amp;rsquo;s major components are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The cast, which contains cast members. Cast members can be visual (such as bitmaps or text), they can be sounds, or they can be scripts.&lt;/li&gt;
&lt;li&gt;The stage, where sprites (instances of cast members) are displayed.&lt;/li&gt;
&lt;li&gt;The score, a sequence of frames which dictate sprite placement, sounds, script execution, and much more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Previously, all these jobs were handled by an enormous Score class. This worked fine when we were only playing one movie at a time, but to support MIAWs, things needed to be a whole lot more modular. Nathanael separated rendering code into a Stage class, while I separated the Cast and Movie from the Score, which took quite a long time.&lt;/p&gt;
&lt;p&gt;After that, I began working on displaying movies within our classic Mac Window manager.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://djsrv.github.io/img/warlock-window.png&#34; alt=&#34;Warlock in a window&#34;&gt;&lt;/p&gt;
&lt;p&gt;Today I began implementing the Lingo side of MIAWs, so I hope to have more news on them soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back to Bytecode</title>
      <link>https://djsrv.github.io/scummvm/back-to-bytecode/</link>
      <pubDate>Sun, 28 Jun 2020 22:11:51 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/back-to-bytecode/</guid>
      <description>&lt;p&gt;This week I wrapped up work on parent scripts and factories, starting with some bug fixes and minor refactoring. The Lingo in &lt;em&gt;Lingo Workshop&lt;/em&gt;&amp;rsquo;s Bug Garden movie now fully works!&lt;/p&gt;

&lt;iframe src=&#34;https://www.youtube.com/embed/QDM4wUz2Oo4&#34; style=&#34;width: 560px; height: 315px; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;After getting Bug Garden working, I began implementation of the bytecode versions of parent scripts and factories. For those not familiar with the Director engine, there are two ways we load Lingo scripts. From Director 2-3, Lingo was stored in Director movies as source code, which we parse and compile to custom bytecode. Starting in Director 4, Lingo was compiled to a &lt;a href=&#34;http://fileformats.archiveteam.org/wiki/Lingo_bytecode&#34;&gt;bytecode&lt;/a&gt; which is similar to our own, but it has a good number of differences. This bytecode is stored within movies&amp;rsquo; &lt;code&gt;Lscr&lt;/code&gt; chunks, which also contain script metadata, much of which we don&amp;rsquo;t yet handle. Due to the bytecode differences and unhandled metadata, parent scripts and factories only worked when the Lingo was loaded from source code, not from &lt;code&gt;Lscr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this, I needed to get back to my Director roots, which started with reverse-engineering &lt;code&gt;Lscr&lt;/code&gt; for the development of &lt;a href=&#34;https://github.com/Earthquake-Project/ProjectorRays&#34;&gt;ProjectorRays&lt;/a&gt;, a Lingo bytecode decompiler. I already knew how to handle parent scripts from ProjectorRays, but factories were a mystery, so I needed to go back to the old strategy of incrementally changing test movies and watching what data changes. I&amp;rsquo;ll spare you the fine details of how factories are stored, but basically scripts which contain factories are split into multiple &lt;code&gt;Lscr&lt;/code&gt; chunks, with one chunk for each factory, and there&amp;rsquo;s some metadata which ties these chunks together. With that work done, parent scripts and factories can now be loaded from bytecode.&lt;/p&gt;
&lt;p&gt;I also did some more work with events, which I will continue this coming week. Last week I said that only one object is supposed to handle each event, which is only partially true. Sev pointed out that an event handler can call &lt;code&gt;pass&lt;/code&gt;, which will pass the event to the next object in the chain of potential handlers, so I needed to make further changes to event delegation to handle that. Now I&amp;rsquo;m in the process of checking event execution order against different versions of Director, and then it&amp;rsquo;s on to implementing windows.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sounds, Events, and Bugs</title>
      <link>https://djsrv.github.io/scummvm/sounds-events-bugs/</link>
      <pubDate>Sun, 21 Jun 2020 23:23:04 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/sounds-events-bugs/</guid>
      <description>&lt;p&gt;This last week was a busy one, with my focus split between three main tasks.&lt;/p&gt;
&lt;p&gt;The first two days, I played through the beginning of &lt;em&gt;Spaceship Warlock&lt;/em&gt;, identifying and fixing any Lingo issues. I quickly got frustrated with not being able to hear the game&amp;rsquo;s dialogue, so I improved our decoder for Macintosh &lt;code&gt;snd &lt;/code&gt; resources so that it could handle &lt;em&gt;Warlock&lt;/em&gt;&amp;rsquo;s sounds:&lt;/p&gt;

&lt;iframe src=&#34;https://www.youtube.com/embed/KVChLrPZds8&#34; style=&#34;width: 560px; height: 315px; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;The next day, I focused on event handling: fixing some strange bugs, and then rewriting most of our event code to allow for proper event delegation. Only one object is supposed to handle each event—sometimes a sprite, sometimes a cast member, sometimes the frame, and sometimes the movie. I still haven&amp;rsquo;t perfected the process of determining which object it should be in every case, but the new system is a heck of a lot better than before, when we were just firing off the event to everything that could possibly handle it.&lt;/p&gt;
&lt;p&gt;For the rest of the week, I began implementing parent scripts, Lingo&amp;rsquo;s second iteration of object-oriented programming. With factories already implemented, this was relatively easy, but the test movies I&amp;rsquo;ve been working with, the object-oriented bug examples from &lt;em&gt;Lingo Workshop&lt;/em&gt;, have been surprisingly hard to get working, using all sorts of uncommon Lingo features. Our implementations of many of these features were buggy, to say the least, and I&amp;rsquo;ve been slowly working through them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://djsrv.github.io/img/bug-garden.png&#34; alt=&#34;Bug garden&#34;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve finally squashed enough of the bad type of bug to get the good type to display! Still, there&amp;rsquo;s plenty of work to do, which I will get to tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FileIO Fun</title>
      <link>https://djsrv.github.io/scummvm/fileio-fun/</link>
      <pubDate>Sun, 14 Jun 2020 18:58:51 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/fileio-fun/</guid>
      <description>&lt;p&gt;This week my focus was on our first XObject, FileIO, which allows Lingo to read/write files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set file = FileIO(mNew, &amp;quot;write&amp;quot;, &amp;quot;foo.txt&amp;quot;)
file(mWriteString, &amp;quot;Hello, world!&amp;quot; &amp;amp; RETURN)
file(mDispose)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Relatively simple, so FileIO itself didn&amp;rsquo;t take long to implement. After that was done, I spent most of the week hunting down and fixing bugs and missing Lingo features in two major FileIO examples, &lt;em&gt;The Apartment&lt;/em&gt;&amp;rsquo;s Saving Text and &lt;em&gt;Spaceship Warlock&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Funnily enough, I managed to find more scripts that weren&amp;rsquo;t being loaded, and of course, &lt;em&gt;The Journeyman Project&lt;/em&gt; was hiding more syntax errors that revealed themselves once these scripts were properly handled:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://djsrv.github.io/img/jman-failure2.png&#34; alt=&#34;Many more failed tests in the Journeyman Project&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Journeyman&lt;/em&gt; is a treasure trove of syntax errors. :)&lt;/p&gt;
&lt;p&gt;Now that all those problems are addressed, I&amp;rsquo;m proud to announce that &lt;em&gt;Spaceship Warlock&lt;/em&gt; can now save and load games!&lt;/p&gt;

&lt;iframe src=&#34;https://www.youtube.com/embed/RR1D1DxUvFM&#34; style=&#34;width: 560px; height: 315px; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;This will allow us to progress through the game in more than one sitting, making testing the whole thing much easier.&lt;/p&gt;
&lt;p&gt;This coming week I&amp;rsquo;m planning to identify and implement more missing Lingo throughout the game, hopefully bringing it to a much more playable state. See you in a week or so with news on that!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Charlie and the Object Factory</title>
      <link>https://djsrv.github.io/scummvm/charlie-and-the-object-factory/</link>
      <pubDate>Sun, 07 Jun 2020 15:05:26 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/charlie-and-the-object-factory/</guid>
      <description>&lt;p&gt;&amp;ldquo;An important room, this!&amp;rdquo; cried Mr. Wonka, taking a bunch of keys from his pocket and slipping one into the keyhole of the door. &amp;ldquo;&lt;em&gt;This&lt;/em&gt; is the nerve center of the whole factory, the heart of the whole business! And so &lt;em&gt;beautiful&lt;/em&gt;! I &lt;em&gt;insist&lt;/em&gt; upon my rooms being beautiful! I can&amp;rsquo;t &lt;em&gt;abide&lt;/em&gt; ugliness in factories! &lt;em&gt;In&lt;/em&gt; we go, then! But &lt;em&gt;do&lt;/em&gt; be careful, my dear children! Don&amp;rsquo;t lose your heads! Don&amp;rsquo;t get overexcited! Keep very calm!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Mr. Wonka opened the door. Five children and nine grownups pushed their ways in—and, &lt;em&gt;oh&lt;/em&gt;, what an amazing sight it was that now met their eyes!&lt;/p&gt;

&lt;iframe src=&#34;https://www.youtube.com/embed/oVb2VyXqwsE&#34; style=&#34;width: 560px; height: 315px; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;That&amp;rsquo;s right, the Director 2 Simple Factory example now runs in ScummVM (with some modifications to account for broken button rendering)! I had to implement several Lingo features for this movie, but the most important is, of course, factories, which are essentially Lingo&amp;rsquo;s first iteration of object-oriented programming.&lt;/p&gt;
&lt;p&gt;For example, here&amp;rsquo;s a snippet from the &lt;code&gt;ballBoy&lt;/code&gt; factory used in this movie:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;factory ballBoy

method mNew n, entry
    instance ballNum,  spriteNum, count, entryNum

    set entryNum = entry
    set count = 0
    set ballNum = n 
    set spriteNum = n + 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the button in the bottom-right corner is clicked, a new &lt;code&gt;ballBoy&lt;/code&gt; object is created and associated with a ball sprite. This object becomes the control center of the sprite, giving it logic that keeps track of how many times it&amp;rsquo;s been clicked, changing its appearance, and allowing it to be dragged around.&lt;/p&gt;
&lt;p&gt;Factories are used extensively throughout &lt;em&gt;Spaceship Warlock&lt;/em&gt;, so now that they&amp;rsquo;re implemented, I&amp;rsquo;ll be working directly on that game in the near future.&lt;/p&gt;
&lt;p&gt;Besides factories, this week I implemented numerous event-handling features, and I discovered and fixed a bug that prevented certain scripts in Director 2 and 3 movies from being loaded. This caused a horrifying amount of unhandled Lingo syntax in &lt;em&gt;The Journeyman Project&lt;/em&gt; to suddenly reveal itself:
&lt;img src=&#34;https://djsrv.github.io/img/jman-failure.png&#34; alt=&#34;Lots of failed tests in the Journeyman Project&#34;&gt;&lt;/p&gt;
&lt;p&gt;Luckily, sev has now fixed all of those errors.&lt;/p&gt;
&lt;p&gt;Onward to more Lingo!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Day of Coding</title>
      <link>https://djsrv.github.io/scummvm/first-day-of-coding/</link>
      <pubDate>Mon, 01 Jun 2020 23:59:24 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/first-day-of-coding/</guid>
      <description>&lt;p&gt;The first official day of coding has just ended!&lt;/p&gt;
&lt;p&gt;I spent the last 9 days before this one driving from New Jersey to Arizona and back, so no progress to report on except this first official day, which I spent implementing Lingo factories and ironing out kinks in my workstation. Now Lingo supports creating factories and calling methods on them, and tomorrow I&amp;rsquo;ll be implementing default methods, instance variables, parent scripts, and whatever else pops up.&lt;/p&gt;
&lt;p&gt;Hope to report on some more exciting progress soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Week of Preparation</title>
      <link>https://djsrv.github.io/scummvm/a-week-of-preparation/</link>
      <pubDate>Wed, 20 May 2020 18:12:16 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/a-week-of-preparation/</guid>
      <description>&lt;p&gt;School&amp;rsquo;s out, Summer of Code prep has begun! This past week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve been reading and re-reading the code for ScummVM&amp;rsquo;s &lt;a href=&#34;https://github.com/scummvm/scummvm/tree/master/engines/director/lingo&#34;&gt;Lingo subsystem&lt;/a&gt; to improve my mental map of it, and I&amp;rsquo;ve been making &lt;a href=&#34;https://github.com/scummvm/scummvm/commits?author=djsrv&#34;&gt;small fixes&lt;/a&gt; when I catch problems.&lt;/li&gt;
&lt;li&gt;I collected some of the &lt;a href=&#34;https://wiki.scummvm.org/index.php/Director#File_Format&#34;&gt;documentation&lt;/a&gt; I encountered in my past adventures with Director. A ton of interesting information on Director&amp;rsquo;s file format in there!&lt;/li&gt;
&lt;li&gt;I set up a shelf next to my desk and turned it into my obsolete Macromedia products library (mostly Director books, of course).
&lt;img src=&#34;https://djsrv.github.io/img/macromedia-library.jpg&#34; alt=&#34;Shelf of Macromedia Director books&#34;&gt;&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve been reading up on Lingo&amp;rsquo;s factories and parent scripts, two different object systems and the eventual basis for Director&amp;rsquo;s XObjects and Xtras.&lt;/li&gt;
&lt;li&gt;I did some &lt;a href=&#34;https://docs.google.com/document/d/1bsq80TFdz38Ib2W0O8YfAazNe2SrPEgWIKheb5GV1KI/edit&#34;&gt;planning&lt;/a&gt; for the implementation of these object systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomorrow sev and I are going to meet with &lt;a href=&#34;https://en.wikipedia.org/wiki/John_Thompson_(inventor)&#34;&gt;John Henry Thomspon&lt;/a&gt;, the inventor of Lingo, to discuss the implementation of factories! I grew up playing Shockwave (for Director) games, and I&amp;rsquo;ve spent a good deal of time hacking with their Lingo bytecode, so I&amp;rsquo;m looking forward to meeting the man himself.&lt;/p&gt;
&lt;p&gt;I should probably elaborate on my history with Director. I&amp;rsquo;m currently 19, so I only caught the tail end of Shockwave gaming, and I mostly played Flash games. I got interested in how web games worked in 2013-2014, and there were some fantastic, user-friendly tools for peering into the inner workings of Flash &lt;code&gt;.swf&lt;/code&gt; files, such as &lt;a href=&#34;https://github.com/jindrapetrik/jpexs-decompiler&#34;&gt;JPEXS Free Flash Decompiler (FFDEC)&lt;/a&gt;. However, every so often I&amp;rsquo;d encounter a Director &lt;code&gt;.dcr&lt;/code&gt; file, and there were no good tools for these. I wasn&amp;rsquo;t capable enough to do the necessary reverse engineering myself, so for the next few years, I gave up on Director.&lt;/p&gt;
&lt;p&gt;In 2017, I came across a &lt;a href=&#34;https://www.youtube.com/watch?v=kNQ2XwRcbmM&#34;&gt;YouTube video&lt;/a&gt; about a lost Director game that some people were interested in finding, &amp;ldquo;Jimmy Neutron: Gotta Blast! Rocket Race&amp;rdquo;. I decided to look for the game, and I found a subdomain of nick.com that mirrored the website as it was sometime in the mid 2000s. Within a couple minutes, I found the landing page for the game on that subdomain. However, the page required you to log in with a Nick ID to get to the game, and the signup page no longer worked. I thought I&amp;rsquo;d hit a dead end, but then I remembered I&amp;rsquo;d already signed up for a Nick ID about 10 years before, in my early days on the web. I began guessing combinations of old usernames and passwords until I got to the game, I posted it on the 3D Groove Grove Discord server, and now my crowning achievement is having my Discord alias &amp;lsquo;kaj&amp;rsquo; listed as the game&amp;rsquo;s discoverer on its &lt;a href=&#34;https://lostmediawiki.com/Jimmy_Neutron:_Gotta_Blast!_Rocket_Race_(partially_found_online_game;_2002)&#34;&gt;Lost Media Wiki article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Soon after I posted the game files, the 3D Groove Grove users discovered that the game was incomplete, missing most of the levels that were advertised in commercials. I wanted to poke around the game to see what was up, but at that point the tools for working with Director files were still extremely limited. With some searching, I found a primitive Lingo disassembler called &lt;a href=&#34;https://github.com/Brian151/OpenShockwave/tree/master/tools/lscrtoscript&#34;&gt;ProjectorRays&lt;/a&gt; that tomysshadow, the admin of the 3D Groove Grove server, had been working on. I asked him about it, and he invited me to the OpenShockwave Discord server, where people were reverse engineering Director with eventual plans to build an open-source replacement for the Shockwave player. I picked up work on ProjectorRays, and I took it from a half-working Lingo disassembler to a mostly-working decompiler. Soon OpenShockwave became the Earthquake Project, and progress on Lingo decompilation continued with &lt;a href=&#34;https://github.com/Earthquake-Project/Shockky/&#34;&gt;Shockky&lt;/a&gt;, but everything else stalled.&lt;/p&gt;
&lt;p&gt;Three years later, I still wanted to work on an open-source Director reimplementation, so here I am now at ScummVM. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello, ScummVM!</title>
      <link>https://djsrv.github.io/scummvm/hello-scummvm/</link>
      <pubDate>Tue, 12 May 2020 00:12:43 -0400</pubDate>
      <author>dservilla@gmail.com (Dylan Servilla)</author>
      <guid>https://djsrv.github.io/scummvm/hello-scummvm/</guid>
      <description>&lt;p&gt;Hi! I&amp;rsquo;m Dylan Servilla, and this summer I&amp;rsquo;m going to be working on ScummVM&amp;rsquo;s Macromedia Director engine as a GSoC student. Director was used to create a ton of multimedia from the late &amp;rsquo;80s to early &amp;rsquo;00s, and I think it&amp;rsquo;s important that we save this digital history from software rot. In particular, I hope to help the engine reach full support for Spaceship Warlock and The Journeyman Project in the near future. :)&lt;/p&gt;
&lt;p&gt;A good portion of my work will be reimplementing Lingo, Director&amp;rsquo;s scripting language. I made some &lt;a href=&#34;https://github.com/Brian151/OpenShockwave/tree/master/tools/lscrtoscript&#34;&gt;Lingo&lt;/a&gt; &lt;a href=&#34;https://github.com/Earthquake-Project/ProjectorRays&#34;&gt;decompilation&lt;/a&gt; &lt;a href=&#34;https://github.com/Earthquake-Project/earthquake-rust&#34;&gt;tools&lt;/a&gt; a few years back, and I&amp;rsquo;m very excited to continue exploring the intricacies of this language under the guidance of ScummVM&amp;rsquo;s fantastic mentors.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll see you soon with more updates!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
